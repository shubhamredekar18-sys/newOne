
name: Deploy Flask Todo App to AWS EC2

on:
  workflow_dispatch:
    
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env file from secrets
        run: |
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" >> .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "MYSQL_DB=${{ secrets.MYSQL_DB }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "APP_PORT=${{ secrets.APP_PORT }}" >> .env

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~
            # Remove existing project and clone fresh
            rm -rf flask-bootstrap-app
            git clone https://github.com/${{ github.repository }}.git flask-bootstrap-app
            cd flask-bootstrap-app
            if ! command -v pip3 &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y python3-pip || sudo yum install -y python3-pip
            fi
            # Install MySQL client libraries for mysqlclient
            sudo apt-get update && sudo apt-get install -y default-libmysqlclient-dev build-essential pkg-config mysql-client || sudo yum install -y mysql-devel gcc pkgconfig mysql
            pip3 install --break-system-packages -r requirements.txt
            echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" > .env
            echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
            echo "MYSQL_DB=${{ secrets.MYSQL_DB }}" >> .env
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
            echo "APP_PORT=${{ secrets.APP_PORT }}" >> .env
            # Create MySQL database if it doesn't exist
            mysql -h${{ secrets.MYSQL_HOST }} -u${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.MYSQL_DB }};"
            sudo ufw allow ${{ secrets.APP_PORT }}
            export $(cat .env | xargs)
            # Start the app with proper background execution and full detachment
            echo "Starting Flask app..."
            nohup python3 app.py > app.log 2>&1 < /dev/null &
            APP_PID=$!
            disown $APP_PID
            echo "Started Flask app with PID: $APP_PID and detached from session"
            # Wait a moment for the app to start
            sleep 5
            # Check if the process is still running
            if ps -p $APP_PID > /dev/null 2>&1; then
              echo "Flask app is running successfully on port ${{ secrets.APP_PORT }}"
              echo "Process status:"
              ps -p $APP_PID -o pid,ppid,cmd
              echo "App logs:"
              tail -n 10 app.log
              echo "Checking if app is listening on port:"
              netstat -tlnp | grep ${{ secrets.APP_PORT }} || echo "Port not yet listening"
            else
              echo "Flask app failed to start or crashed"
              echo "Error logs:"
              cat app.log
              exit 1
            fi           